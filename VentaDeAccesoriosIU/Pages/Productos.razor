@page "/productos"
@inject IProductoService ProductoService
@inject ICategoriaService CategoriaService
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<h3>Gestión de Productos</h3>

<EditForm Model="@producto" OnValidSubmit="GuardarProducto">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText @bind-Value="producto.Nombre" class="form-control" />
        <ValidationMessage For="@(() => producto.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Descripción</label>
        <InputTextArea @bind-Value="producto.Descripcion" class="form-control" />
        <ValidationMessage For="@(() => producto.Descripcion)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Precio</label>
        <InputNumber @bind-Value="producto.Precio" class="form-control" step="0.01" />
        <ValidationMessage For="@(() => producto.Precio)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Stock</label>
        <InputNumber @bind-Value="producto.Stock" class="form-control" />
        <ValidationMessage For="@(() => producto.Stock)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Categoría</label>
        <InputSelect @bind-Value="producto.CategoriaId" class="form-select">
            <option value="">-- Seleccione una categoría --</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria.Id">@categoria.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => producto.CategoriaId)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Imagen</label>
        <InputFile OnChange="CargarImagen" />
        @if (!string.IsNullOrEmpty(imagenPreview))
        {
            <img src="@imagenPreview" class="img-thumbnail mt-2" style="max-width: 200px;" />
        }
    </div>

    <button type="submit" class="btn btn-primary">Guardar Producto</button>
</EditForm>

@code {
    private Producto producto = new Producto();
    private List<Categoria> categorias = new();
    private string? imagenPreview;

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriaService.ObtenerCategoriasAsync();
    }

    private async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        var buffer = new byte[archivo.Size];
        await archivo.OpenReadStream().ReadAsync(buffer);

        producto.Imagen = buffer;

        // Mostrar vista previa
        imagenPreview = $"data:{archivo.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task GuardarProducto()
    {
        await ProductoService.GuardarProductoAsync(producto);
        NavigationManager.NavigateTo("/productos/listado");
    }

    public class Producto
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "La descripción es obligatoria.")]
        public string Descripcion { get; set; } = string.Empty;

        [Required(ErrorMessage = "El precio es obligatorio.")]
        [Range(0.01, double.MaxValue, ErrorMessage = "El precio debe ser mayor que 0.")]
        public decimal Precio { get; set; }

        [Required(ErrorMessage = "El stock es obligatorio.")]
        [Range(0, int.MaxValue, ErrorMessage = "El stock no puede ser negativo.")]
        public int Stock { get; set; }

        [Required(ErrorMessage = "Debe seleccionar una categoría.")]
        public int? CategoriaId { get; set; }

        public byte[]? Imagen { get; set; }
    }

    public class Categoria
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
    }
}
