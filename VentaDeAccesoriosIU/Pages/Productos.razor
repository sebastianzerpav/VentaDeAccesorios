@page "/productos"
@using System.Net.Http.Json
@inject HttpClient Http

@* Paagina de administración de productos con CRUD ,
   consumiendo las rutas de el controlador de producto *@

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <style>

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            line-height: 1.6;
            color: #333;
        }


        .header {
            background-color: #2c3e50;
            color: white;
            padding: 1rem 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .nav-menu {
            display: flex;
            list-style: none;
            gap: 2rem;
        }

            .nav-menu a {
                color: white;
                text-decoration: none;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                transition: background-color 0.3s ease;
            }

                .nav-menu a:hover,
                .nav-menu a.active {
                    background-color: #34495e;
                }


        .main-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
            display: grid;
            gap: 2rem;
        }


        .section-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .section-header {
            background-color: #3498db;
            color: white;
            padding: 1rem 1.5rem;
            font-size: 1.2rem;
            font-weight: bold;
        }

        .section-content {
            padding: 1.5rem;
        }


        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

            .form-group label {
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: #555;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                padding: 0.75rem;
                border: 2px solid #e1e8ed;
                border-radius: 4px;
                font-size: 1rem;
                transition: border-color 0.3s ease;
            }

                .form-group input:focus,
                .form-group select:focus,
                .form-group textarea:focus {
                    outline: none;
                    border-color: #3498db;
                }

            .form-group textarea {
                resize: vertical;
                min-height: 80px;
            }


        .button-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 120px;
        }

        .btn-primary {
            background-color: #3498db;
            color: white;
        }

            .btn-primary:hover {
                background-color: #2980b9;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
            }

        .btn-success {
            background-color: #27ae60;
            color: white;
        }

            .btn-success:hover {
                background-color: #229954;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(39, 174, 96, 0.3);
            }

        .btn-warning {
            background-color: #f39c12;
            color: white;
        }

            .btn-warning:hover {
                background-color: #e67e22;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(243, 156, 18, 0.3);
            }

        .btn-danger {
            background-color: #e74c3c;
            color: white;
        }

            .btn-danger:hover {
                background-color: #c0392b;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
            }

        .btn-secondary {
            background-color: #95a5a6;
            color: white;
        }

            .btn-secondary:hover {
                background-color: #7f8c8d;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(149, 165, 166, 0.3);
            }

        /* Tabla de listado */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th,
        td {
            padding: 0.75rem;
            border: 1px solid #e1e8ed;
            text-align: left;
        }

        th {
            background-color: #ecf0f1;
            font-weight: 600;
        }

        tr:hover {
            background-color: #f1f1f1;
        }


        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
            gap: 0.5rem;
        }

            .pagination button {
                padding: 0.5rem 1rem;
                border: none;
                background-color: #3498db;
                color: white;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .pagination button:disabled {
                    background-color: #95a5a6;
                    cursor: not-allowed;
                }

                .pagination button:hover:not(:disabled) {
                    background-color: #2980b9;
                }


        .alert {
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            border-left: 4px solid;
        }

        .alert-info {
            background-color: #d1ecf1;
            border-color: #3498db;
            color: #0c5460;
        }
    </style>
</head>
<body>


    <main class="main-container">

        <section class="section-card">
            <div class="section-header">Gestión de Productos</div>
            <div class="section-content">
                <EditForm Model="producto" OnValidSubmit="HandleValidSubmit">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="idProducto">ID Producto (para buscar/actualizar/eliminar)</label>
                            <InputNumber id="idProducto" @bind-Value="producto.IdProducto" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="nombre">Nombre del producto<span class="text-danger">*</span></label>
                            <InputText id="nombre" @bind-Value="producto.Nombre" class="form-control" placeholder="Ej: Camiseta deportiva" />
                        </div>
                        <div class="form-group">
                            <label for="descripcion">Descripción</label>
                            <InputTextArea id="descripcion" @bind-Value="producto.Descripcion" class="form-control" placeholder="Escribe una breve descripción..." />
                        </div>
                        <div class="form-group">
                            <label for="precioCompra">Precio Compra</label>
                            <InputNumber id="precioCompra" @bind-Value="producto.PrecioCompra" class="form-control" placeholder="Ej: 15000" min=0 />
                        </div>
                        <div class="form-group">
                            <label for="precioVenta">Precio Venta</label>
                            <InputNumber id="precioVenta" @bind-Value="producto.PrecioVenta" class="form-control" placeholder="Ej: 25000" min=0 />
                        </div>
                        <div class="form-group">
                            <label for="stockTotal">Stock Total</label>
                            <InputNumber id="stockTotal" @bind-Value="producto.StockTotal" class="form-control" placeholder="Ej: 100" min=0 />
                        </div>
                        <div class="form-group">
                            <label for="garantiaMeses">Garantía (meses)</label>
                            <InputNumber id="garantiaMeses" @bind-Value="producto.GarantiaMeses" class="form-control" placeholder="Ej: 12" min=0 />
                        </div>
                    </div>

                    <div class="button-group">
                        <button type="button" class="btn btn-success" @onclick="Insertar">Insertar</button>
                        <button type="button" class="btn btn-warning" @onclick="Actualizar">Actualizar</button>
                        <button type="button" class="btn btn-danger" @onclick="EliminarProductoFormulario">Eliminar</button>
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                        <button type="button" class="btn btn-secondary" @onclick="ConsultarTodos">Consultar Todos</button>
                        <button type="button" class="btn btn-secondary" @onclick="LimpiarFormulario">Limpiar</button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(mensaje))
                {
                    <div class="alert alert-info mt-3">@mensaje</div>
                }
            </div>
        </section>


        <section class="section-card">
            <div class="section-header">Lista de Productos</div>
            <div class="section-content">
                @if (listaProductos == null || listaProductos.Count == 0)
                {
                    <div class="empty-state" style="text-align:center; padding:2rem; color:#7f8c8d;">
                        <div class="empty-state-icon" style="font-size:3rem; margin-bottom:1rem;">📦</div>
                        <h3>No hay productos disponibles</h3>
                        <p>Agrega productos para verlos en la lista.</p>
                    </div>
                }
                else
                {
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Precio Compra</th>
                                <th>Precio Venta</th>
                                <th>Stock</th>
                                <th>Garantía (meses)</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var prod in productosPaginados)
                            {
                                <tr>
                                    <td>@prod.IdProducto</td>
                                    <td>@prod.Nombre</td>
                                    <td>@prod.Descripcion</td>
                                    <td>@prod.PrecioCompra.ToString("C0")</td>
                                    <td>@prod.PrecioVenta.ToString("C0")</td>
                                    <td>@prod.StockTotal</td>
                                    <td>@prod.GarantiaMeses</td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="() => SeleccionarProducto(prod)">Seleccionar</button>
                                        <button class="btn btn-danger" @onclick="() => EliminarProductoDeTabla(prod.IdProducto)">Eliminar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="pagination">
                        <button @onclick="PaginaAnterior" disabled="@(paginaActual == 1)">Anterior</button>
                        <span style="align-self:center; margin: 0 1rem;">Página @paginaActual de @totalPaginas</span>
                        <button @onclick="PaginaSiguiente" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
                    </div>
                }
            </div>
        </section>
    </main>
</body>
</html>

@code {

    private int paginaActual = 1;
    private int tamanoPagina = 5;
    private int totalPaginas => (int)Math.Ceiling((double)listaProductos.Count / tamanoPagina);
    private IEnumerable<Producto> productosPaginados => listaProductos
        .Skip((paginaActual - 1) * tamanoPagina)
        .Take(tamanoPagina);

    private string baseUrl = "http://tiendadeaccesorios.runasp.net/api/Productos";


    private List<Producto> listaProductos = new();
    private Producto producto = new Producto();
    private string mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ConsultarTodos();
    }

    private void HandleValidSubmit()
    {

    }

    private async Task Insertar()
    {
        if (string.IsNullOrWhiteSpace(producto.Nombre) ||
            producto.PrecioCompra <= 0 ||
            producto.PrecioVenta <= 0)
        {
            mensaje = "Nombre, precio de compra y precio de venta son obligatorios y deben ser mayores a cero.";
            return;
        }

        try
        {

            var response = await Http.PostAsJsonAsync($"{baseUrl}/Insert", producto);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Producto insertado correctamente.";
                await ConsultarTodos();
                LimpiarFormulario();
            }
            else
            {
                var texto = await response.Content.ReadAsStringAsync();
                mensaje = $"Error al insertar producto: {response.ReasonPhrase} ({texto})";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al insertar: {ex.Message}";
        }
    }

    private async Task Actualizar()
    {
        if (producto.IdProducto <= 0)
        {
            mensaje = "Debe especificar un ID válido para actualizar.";
            return;
        }
        if (string.IsNullOrWhiteSpace(producto.Nombre) ||
            producto.PrecioCompra <= 0 ||
            producto.PrecioVenta <= 0)
        {
            mensaje = "Nombre, precio de compra y precio de venta son obligatorios y deben ser mayores a cero.";
            return;
        }

        try
        {
            // PUT api/Productos/{id}
            var response = await Http.PutAsJsonAsync($"{baseUrl}/Update/{producto.IdProducto}", producto);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Producto actualizado correctamente.";
                await ConsultarTodos();
                LimpiarFormulario();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                mensaje = "Producto no encontrado para actualizar.";
            }
            else
            {
                var texto = await response.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar producto: {response.ReasonPhrase} ({texto})";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al actualizar: {ex.Message}";
        }
    }

    private async Task Buscar()
    {

        if (producto.IdProducto > 0)
        {
            try
            {
                var resultado = await Http.GetFromJsonAsync<Producto>($"{baseUrl}/GetById/{producto.IdProducto}");
                paginaActual = 1;
                if (resultado != null)
                {
                    listaProductos = new List<Producto> { resultado };
                    mensaje = "Producto encontrado por ID.";
                }
                else
                {
                    listaProductos.Clear();
                    mensaje = "Producto no encontrado.";
                }
            }
            catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                listaProductos.Clear();
                mensaje = "Producto no encontrado.";
            }
            catch (Exception ex)
            {
                mensaje = $"Error de consulta por ID: {ex.Message}";
            }
        }

        else if (!string.IsNullOrWhiteSpace(producto.Nombre))
        {
            try
            {
                var resultados = await Http.GetFromJsonAsync<List<Producto>>($"{baseUrl}/search?nombre={Uri.EscapeDataString(producto.Nombre)}");
                paginaActual = 1;
                if (resultados != null && resultados.Any())
                {
                    listaProductos = resultados.OrderByDescending(p => p.IdProducto).ToList();
                    mensaje = "Resultados encontrados por nombre.";
                }
                else
                {
                    listaProductos.Clear();
                    mensaje = "No se encontraron productos con ese nombre.";
                }
            }
            catch (Exception ex)
            {
                mensaje = $"Error de consulta por nombre: {ex.Message}";
            }
        }
        else
        {
            mensaje = "Por favor, ingresa un ID o un Nombre para buscar.";
        }
    }

    private async Task ConsultarTodos()
    {
        try
        {

            var productos = await Http.GetFromJsonAsync<List<Producto>>($"{baseUrl}/GetAll") ?? new List<Producto>();
            if (productos.Any())
            {
                listaProductos = productos.OrderByDescending(p => p.IdProducto).ToList();
                mensaje = $"Se encontraron {listaProductos.Count} productos.";
            }
            else
            {
                listaProductos.Clear();
                mensaje = "No hay productos registrados.";
            }
            paginaActual = 1;
        }
        catch (Exception ex)
        {
            listaProductos.Clear();
            mensaje = $"Error al consultar productos: {ex.Message}";
        }
    }

    private void SeleccionarProducto(Producto p)
    {
        producto = new Producto
            {
                IdProducto = p.IdProducto,
                Nombre = p.Nombre,
                Descripcion = p.Descripcion,
                PrecioCompra = p.PrecioCompra,
                PrecioVenta = p.PrecioVenta,
                StockTotal = p.StockTotal,
                GarantiaMeses = p.GarantiaMeses
            };
        mensaje = $"Producto '{p.Nombre}' (ID {p.IdProducto}) seleccionado.";
    }


    private async Task EliminarProductoFormulario()
    {
        if (producto.IdProducto <= 0)
        {
            mensaje = "Debe especificar un ID válido para eliminar.";
            return;
        }

        await EliminarProducto(producto.IdProducto);
    }


    private async Task EliminarProductoDeTabla(int id)
    {
        await EliminarProducto(id);
    }


    private async Task EliminarProducto(int id)
    {
        if (id <= 0)
        {
            mensaje = "ID inválido para eliminar.";
            return;
        }

        try
        {

            var response = await Http.DeleteAsync($"{baseUrl}/Delete/{id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = $"Producto con ID {id} eliminado correctamente.";
                await ConsultarTodos();
                LimpiarFormulario();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                mensaje = "Producto no encontrado para eliminar.";
            }
            else
            {
                var texto = await response.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar producto: {response.ReasonPhrase} ({texto})";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al eliminar: {ex.Message}";
        }
    }

    private void LimpiarFormulario()
    {
        producto = new Producto();
        mensaje = string.Empty;
    }

    private void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
            paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (paginaActual > 1)
            paginaActual--;
    }

    // Definición del modelo "Producto"
    public class Producto
    {
        public int IdProducto { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
        public decimal PrecioCompra { get; set; }
        public decimal PrecioVenta { get; set; }
        public int StockTotal { get; set; }
        public int GarantiaMeses { get; set; }
    }
}