@page "/usuarios"
@layout UsuariosLayout
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<section class="content">
    <div class="container-fluid">
        <div class="row">

            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Usuarios</h3>
                    </div>

                    <EditForm Model="@usuario" OnValidSubmit="HandleValidSubmit">
                        <div class="card-body">
                            <div class="card card-gray-dark">
                                <div class="card-header">
                                    <h3 class="card-title">Datos de Usuario</h3>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-1">
                                            <div class="form-group">
                                                <label for="txtID">ID</label>
                                                <InputNumber id="txtID" class="form-control" @bind-Value="usuario.IdUsuario" min="0" required />
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label for="txtNombre">Nombre <span class="text-danger">*</span></label>
                                                <InputText id="txtNombre" class="form-control" @bind-Value="usuario.Nombre" required />
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label for="txtApellido">Apellido <span class="text-danger">*</span></label>
                                                <InputText id="txtApellido" class="form-control" @bind-Value="usuario.Apellido" required />
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label for="txtCorreo">Correo <span class="text-danger">*</span></label>
                                                <InputText id="txtCorreo" class="form-control" @bind-Value="usuario.CorreoElectronico" type="email" required />
                                            </div>
                                        </div>

                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="txtContraseña">Contraseña <span class="text-danger">*</span></label>
                                                <InputText id="txtContraseña" class="form-control" @bind-Value="usuario.ContrasenaHash" type="password" required />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card card-danger mt-3">
                                <div class="card-header">
                                    <h3 class="card-title">PROCESO</h3>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <button type="button" class="btn btn-primary btn-block btn-lg" @onclick="Insert">INSERTAR</button>
                                        </div>
                                        <div class="col-md-4">
                                            <button type="button" class="btn btn-primary btn-block btn-lg" @onclick="Update">ACTUALIZAR</button>
                                        </div>
                                        <div class="col-md-4">
                                            <button type="button" class="btn btn-primary btn-block btn-lg" @onclick="GetById">CONSULTAR</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <table id="tblEmpleados" class="table table-bordered table-striped" style="width:100%;">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>Nombre</th>
                                                <th>Apellido</th>
                                                <th>Correo</th>
                                                <th>Contraseña</th>
                                                <th>Estado</th>
                                                <th>Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var u in listaUsuarios)
                                            {
                                                <tr>
                                                    <td>@u.IdUsuario</td>
                                                    <td>@u.Nombre</td>
                                                    <td>@u.Apellido</td>
                                                    <td>@u.CorreoElectronico</td>
                                                    <td>************</td>
                                                    <td>@(u.Estado ? "Activo" : "Inactivo")</td>
                                                    <td class="text-center" style="white-space: nowrap; width: 1%;">
                                                        <div class="d-flex flex-row justify-content-center gap-1">
                                                            <button class="btn btn-info btn-sm p-1" @onclick="() => SeleccionarUsuario(u)">Seleccionar</button>
                                                            <button class="btn btn-warning btn-sm p-1" @onclick="() => CambiarEstado(u)">Cambiar Estado</button>
                                                            <button class="btn btn-danger btn-sm p-1" @onclick="() => EliminarUsuario(u.IdUsuario)">Eliminar</button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </EditForm>

                    <div class="card-footer">
                        <div id="dvMensaje">@mensaje</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string baseUrl = "https://localhost:7248/api/Usuario";
    private List<Usuario> listaUsuarios = new();
    private Usuario usuario = new();
    private string mensaje = "";

    private void HandleValidSubmit()
    {
        mensaje = "Formulario válido.";
    }

    private async Task Insert()
    {

        if (string.IsNullOrWhiteSpace(usuario.Nombre) ||
        string.IsNullOrWhiteSpace(usuario.Apellido) ||
        string.IsNullOrWhiteSpace(usuario.CorreoElectronico) ||
        string.IsNullOrWhiteSpace(usuario.ContrasenaHash))
    {
        mensaje = "Todos los campos son obligatorios.";
        return;
    }

    // Validar que el correo sea válido
    if (!usuario.CorreoElectronico.Contains("@") || !usuario.CorreoElectronico.Contains("."))
    {
        mensaje = "El correo ingresado no es válido.";
        return;
    }
        try
        {    
            var nuevoUsuario = new
            {
                usuario.Nombre,
                usuario.Apellido,
                usuario.CorreoElectronico,
                usuario.ContrasenaHash,
                usuario.Estado
            };


            string Url = $"{baseUrl}/Insert";
            var response = await Http.PostAsJsonAsync(Url, nuevoUsuario);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Usuario insertado exitosamente.";
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al insertar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al insertar: {ex.Message}";
        }
    }

    private async Task Update()
    {
        try
        {
            string Url = $"{baseUrl}/Update";
            var response = await Http.PutAsJsonAsync($"{Url}/{usuario.IdUsuario}", usuario);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Usuario actualizado exitosamente.";
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al actualizar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al actualizar: {ex.Message}";
        }
    }
    private async Task GetById()
    {
        try
        {
            string Url = $"{baseUrl}/GetById";
            var result = await Http.GetFromJsonAsync<Usuario>($"{Url}/{usuario.IdUsuario}");
            if (result != null)
            {
                usuario = result;
                mensaje = "Usuario encontrado.";
            }
            else
            {
                mensaje = "Usuario no encontrado.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error de consulta: {ex.Message}";
        }
    }

    private async Task ConsultarTodos()
    {
        try
        {
            string Url = $"{baseUrl}/GetAll";
            var usuarios = await Http.GetFromJsonAsync<List<Usuario>>(Url) ?? new();

            listaUsuarios = usuarios.OrderByDescending(u => u.IdUsuario).ToList(); ;
        }
        catch
        {
            listaUsuarios = new();
        }
    }
    private void SeleccionarUsuario(Usuario u)
    {
        usuario = new Usuario
            {
                IdUsuario = u.IdUsuario,
                Nombre = u.Nombre,
                Apellido = u.Apellido,
                CorreoElectronico = u.CorreoElectronico,
                ContrasenaHash = u.ContrasenaHash,
                Estado = u.Estado
            };
        mensaje = $"Usuario {u.Nombre} seleccionado.";
    }

    private async Task CambiarEstado(Usuario u)
    {
        try
        {
            u.Estado = !u.Estado;

            string url = $"{baseUrl}/Update";
            var response = await Http.PutAsJsonAsync($"{url}/{u.IdUsuario}", u);

            if (response.IsSuccessStatusCode)
            {
                mensaje = $"Estado de {u.Nombre} actualizado a {(u.Estado ? "Activo" : "Inactivo")}.";
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al actualizar estado: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al cambiar estado: {ex.Message}";
        }
    }

    private async Task EliminarUsuario(int id)
    {
        try
        {
            string Url = $"{baseUrl}/Delete";
            var response = await Http.DeleteAsync($"{Url}/{id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = $"Usuario con ID {id} eliminado correctamente.";
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al eliminar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al eliminar: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ConsultarTodos();
    }



    public class Usuario
    {
        public int IdUsuario { get; set; } // ID
        public string Nombre { get; set; } // Nombre
        public string Apellido { get; set; } // Apellido
        public string CorreoElectronico { get; set; } // Correo
        public string ContrasenaHash { get; set; } // Contraseña
        public bool Estado { get; set; } = true; // Activo por defecto
    }
}
