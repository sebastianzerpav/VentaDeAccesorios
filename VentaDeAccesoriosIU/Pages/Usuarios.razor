@page "/usuarios"
@layout MainLayout
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <style>

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            line-height: 1.6;
            color: #333;
        }


        .header {
            background-color: #2c3e50;
            color: white;
            padding: 1rem 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .nav-menu {
            display: flex;
            list-style: none;
            gap: 2rem;
        }

            .nav-menu a {
                color: white;
                text-decoration: none;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                transition: background-color 0.3s ease;
            }

                .nav-menu a:hover,
                .nav-menu a.active {
                    background-color: #34495e;
                }


        .main-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
            display: grid;
            gap: 2rem;
        }


        .section-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .section-header {
            background-color: #3498db;
            color: white;
            padding: 1rem 1.5rem;
            font-size: 1.2rem;
            font-weight: bold;
        }

        .section-content {
            padding: 1.5rem;
        }


        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

            .form-group label {
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: #555;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                padding: 0.75rem;
                border: 2px solid #e1e8ed;
                border-radius: 4px;
                font-size: 1rem;
                transition: border-color 0.3s ease;
            }

                .form-group input:focus,
                .form-group select:focus,
                .form-group textarea:focus {
                    outline: none;
                    border-color: #3498db;
                }

            .form-group textarea {
                resize: vertical;
                min-height: 80px;
            }


        .button-group {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-top: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 120px;
        }

        .btn-primary {
            background-color: #3498db;
            color: white;
        }

            .btn-primary:hover {
                background-color: #2980b9;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
            }

        .btn-success {
            background-color: #27ae60;
            color: white;
        }

            .btn-success:hover {
                background-color: #229954;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(39, 174, 96, 0.3);
            }

        .btn-warning {
            background-color: #f39c12;
            color: white;
        }

            .btn-warning:hover {
                background-color: #e67e22;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(243, 156, 18, 0.3);
            }

        .btn-danger {
            background-color: #e74c3c;
            color: white;
        }

            .btn-danger:hover {
                background-color: #c0392b;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
            }

        .btn-secondary {
            background-color: #95a5a6;
            color: white;
        }

            .btn-secondary:hover {
                background-color: #7f8c8d;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(149, 165, 166, 0.3);
            }

        /* Tabla de listado */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th,
        td {
            padding: 0.75rem;
            border: 1px solid #e1e8ed;
            text-align: left;
        }

        th {
            background-color: #ecf0f1;
            font-weight: 600;
        }

        tr:hover {
            background-color: #f1f1f1;
        }


        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
            gap: 0.5rem;
        }

            .pagination button {
                padding: 0.5rem 1rem;
                border: none;
                background-color: #3498db;
                color: white;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .pagination button:disabled {
                    background-color: #95a5a6;
                    cursor: not-allowed;
                }

                .pagination button:hover:not(:disabled) {
                    background-color: #2980b9;
                }


        .alert {
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            border-left: 4px solid;
        }

        .alert-info {
            background-color: #d1ecf1;
            border-color: #3498db;
            color: #0c5460;
        }
    </style>
</head>
<body class="hold-transition sidebar-mini">
<section class="content">
    <div class="container-fluid">
        <div class="row">

            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Usuarios</h3>
                    </div>

                    <EditForm Model="@usuario" OnValidSubmit="HandleValidSubmit">
                        <div class="card-body">
                            <div class="card card-gray-dark">
                                <div class="card-header">
                                    <h3 class="card-title">Datos de Usuario</h3>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-1">
                                            <div class="form-group">
                                                <label for="txtID">ID</label>
                                                <InputNumber id="txtID" class="form-control" @bind-Value="usuario.IdUsuario" min="0" required />
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label for="txtNombre">Nombre <span class="text-danger">*</span></label>
                                                <InputText id="txtNombre" class="form-control" @bind-Value="usuario.Nombre" required />
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label for="txtApellido">Apellido <span class="text-danger">*</span></label>
                                                <InputText id="txtApellido" class="form-control" @bind-Value="usuario.Apellido" required />
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label for="txtCorreo">Correo <span class="text-danger">*</span></label>
                                                <InputText id="txtCorreo" class="form-control" @bind-Value="usuario.CorreoElectronico" type="email" required />
                                            </div>
                                        </div>

                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="txtContraseña">Contraseña <span class="text-danger">*</span></label>
                                                <InputText id="txtContraseña" class="form-control" @bind-Value="usuario.ContrasenaHash" type="password" required />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card card-danger mt-3">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <button type="button" class="btn btn-success btn-block btn-lg" @onclick="Insert">INSERTAR</button>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="button" class="btn btn-warning btn-block btn-lg" @onclick="Update">ACTUALIZAR</button>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="button" class="btn btn-secondary btn-block btn-lg" @onclick="Buscar">CONSULTAR</button>
                                        </div>
                                        <div class="col-md-3">
                                             <button type="button" class="btn btn-secondary btn-block btn-lg" @onclick="LimpiarFormulario">LIMPIAR</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <table id="tblEmpleados" class="table table-bordered table-striped" style="width:100%;">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>Nombre</th>
                                                <th>Apellido</th>
                                                <th>Correo</th>
                                                <th>Contraseña</th>
                                                <th>Estado</th>
                                                <th>Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var u in usuariosPaginados)
                                            {
                                                <tr>
                                                    <td>@u.IdUsuario</td>
                                                    <td>@u.Nombre</td>
                                                    <td>@u.Apellido</td>
                                                    <td>@u.CorreoElectronico</td>
                                                    <td>@u.ContrasenaHash</td>
                                                    <td>@(u.Estado ? "Activo" : "Inactivo")</td>
                                                    <td class="text-center" style="white-space: nowrap; width: 1%;">
                                                        <div class="d-flex flex-row justify-content-center gap-1">
                                                            <button class="btn btn-info btn-sm p-1" @onclick="() => SeleccionarUsuario(u)">Seleccionar</button>
                                                            <button class="btn btn-warning btn-sm p-1" @onclick="() => CambiarEstado(u)">Cambiar Estado</button>
                                                            <button class="btn btn-danger btn-sm p-1" @onclick="() => EliminarUsuario(u.IdUsuario)">Eliminar</button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <div class="pagination">
                                        <button class="btn btn-secondary" @onclick="PaginaAnterior" disabled="@(!PuedeRetroceder)">Anterior</button>

                                            <span style="align-self:center; margin: 0 1rem;">Página @paginaActual de @totalPaginas</span>

                                        <button class="btn btn-secondary" @onclick="PaginaSiguiente" disabled="@(!PuedeAvanzar)">Siguiente</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>

                    <div class="card-footer">
                        <div id="dvMensaje">@mensaje</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
</body>
</html>

@code {
    private int paginaActual = 1;
    private int tamanoPagina = 5;
    private int totalPaginas => (int)Math.Ceiling((double)listaUsuarios.Count / tamanoPagina);

    private IEnumerable<Usuario> usuariosPaginados => listaUsuarios
        .Skip((paginaActual - 1) * tamanoPagina)
        .Take(tamanoPagina);


    private string baseUrl = "http://tiendadeaccesorios.runasp.net/api/Usuario";
    private List<Usuario> listaUsuarios = new();
    private Usuario usuario = new();
    private string mensaje = "";

    private void HandleValidSubmit()
    {
        mensaje = "Formulario válido.";
    }

    private async Task Insert()
    {

        if (string.IsNullOrWhiteSpace(usuario.Nombre) ||
        string.IsNullOrWhiteSpace(usuario.Apellido) ||
        string.IsNullOrWhiteSpace(usuario.CorreoElectronico) ||
        string.IsNullOrWhiteSpace(usuario.ContrasenaHash))
    {
        mensaje = "Todos los campos son obligatorios.";
        return;
    }

    // Validar que el correo sea válido
    if (!usuario.CorreoElectronico.Contains("@") || !usuario.CorreoElectronico.Contains("."))
    {
        mensaje = "El correo ingresado no es válido.";
        return;
    }
        try
        {    
            var nuevoUsuario = new
            {
                usuario.Nombre,
                usuario.Apellido,
                usuario.CorreoElectronico,
                usuario.ContrasenaHash,
                usuario.Estado
            };


            string Url = $"{baseUrl}/Insert";
            var response = await Http.PostAsJsonAsync(Url, nuevoUsuario);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Usuario insertado exitosamente.";
                usuario = new Usuario();
                paginaActual = 1;
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al insertar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al insertar: {ex.Message}";
        }
    }

    private async Task Update()
    {
        try
        {
            string Url = $"{baseUrl}/Update";
            var response = await Http.PutAsJsonAsync($"{Url}/{usuario.IdUsuario}", usuario);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Usuario actualizado exitosamente.";
                usuario = new Usuario();
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al actualizar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al actualizar: {ex.Message}";
        }
    }

    private async Task Buscar()
    {
        if (usuario.IdUsuario > 0)
        {
            // Buscar por ID
            try
            {
                string Url = $"{baseUrl}/GetById";
                var result = await Http.GetFromJsonAsync<Usuario>($"{Url}/{usuario.IdUsuario}");
                paginaActual = 1;
                if (result != null)
                {
                    usuario = result;
                    mensaje = "Usuario encontrado por ID.";
                }
                else
                {
                    mensaje = "Usuario no encontrado.";
                }
            }
            catch (Exception ex)
            {
                mensaje = $"Error de consulta por ID: {ex.Message}";
            }
        }
        else if (!string.IsNullOrWhiteSpace(usuario.Nombre))
        {
            // Buscar por nombre
            try
            {
                string Url = $"{baseUrl}/GetByName";
                var usuarios = await Http.GetFromJsonAsync<List<Usuario>>($"{Url}/{usuario.Nombre}");
                paginaActual = 1;
                if (usuarios != null && usuarios.Any())
                {
                    listaUsuarios = usuarios;
                    mensaje = "Resultados encontrados por nombre.";
                }
                else
                {
                    listaUsuarios = new();
                    mensaje = "No se encontraron usuarios con ese nombre.";
                }
            }
            catch (Exception ex)
            {
                mensaje = $"Error de consulta por nombre: {ex.Message}";
            }
        }
        else
        {
            mensaje = "Por favor, ingresa un ID o un Nombre para buscar.";
        }
    }

    private async Task ConsultarTodos()
    {
        try
        {
            string Url = $"{baseUrl}/GetAll";
            var usuarios = await Http.GetFromJsonAsync<List<Usuario>>(Url) ?? new();

            listaUsuarios = usuarios.OrderByDescending(u => u.IdUsuario).ToList();
            mensaje = "Consulta de usuarios exitosa.";

            paginaActual = 1;
        }
        catch
        {
            listaUsuarios = new();
        }
    }
    private async Task SeleccionarUsuario(Usuario u)
    {
        usuario = new Usuario
            {
                IdUsuario = u.IdUsuario,
                Nombre = u.Nombre,
                Apellido = u.Apellido,
                CorreoElectronico = u.CorreoElectronico,
                ContrasenaHash = u.ContrasenaHash,
                Estado = u.Estado
            };

        mensaje = $"Usuario {u.Nombre} seleccionado.";

        await ConsultarTodos();
    }

    private async Task CambiarEstado(Usuario u)
    {
        try
        {
            u.Estado = !u.Estado;

            string url = $"{baseUrl}/Update";
            var response = await Http.PutAsJsonAsync($"{url}/{u.IdUsuario}", u);

            if (response.IsSuccessStatusCode)
            {
                mensaje = $"Estado de {u.Nombre} actualizado a {(u.Estado ? "Activo" : "Inactivo")}.";
                await ConsultarTodos();
            }
            else
            {
                mensaje = $"Error al actualizar estado: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al cambiar estado: {ex.Message}";
        }
    }

    private async Task EliminarUsuario(int id)
    {
        try
        {
            string Url = $"{baseUrl}/Delete";
            var response = await Http.DeleteAsync($"{Url}/{id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = $"Usuario con ID {id} eliminado correctamente.";
                await ConsultarTodos();

            }
            else
            {
                mensaje = $"Error al eliminar usuario: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al eliminar: {ex.Message}";
        }
    }

    private async Task LimpiarFormulario()
    {
        usuario = new Usuario();          
        mensaje = "Formulario limpio.";  
        await ConsultarTodos();           
    }

    protected override async Task OnInitializedAsync()
    {
        await ConsultarTodos();
    }

    private void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
            paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (paginaActual > 1)
            paginaActual--;
    }

    private bool PuedeAvanzar => paginaActual < totalPaginas;
    private bool PuedeRetroceder => paginaActual > 1;

    public class Usuario
    {
        public int IdUsuario { get; set; } // ID
        public string Nombre { get; set; } // Nombre
        public string Apellido { get; set; } // Apellido
        public string CorreoElectronico { get; set; } // Correo
        public string ContrasenaHash { get; set; } // Contraseña
        public bool Estado { get; set; } = true; // Activo por defecto
    }
}
